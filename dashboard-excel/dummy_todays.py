# -*- coding: utf-8 -*-
"""dummy todays.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q9cN-hLWuIdLOvgr6Oey7P-vMby65ghg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""**Pembuatan data dummy**"""

!pip install Faker
from faker import Faker

# Inisialisasi Faker dan seed
fake = Faker()
Faker.seed(42)
random.seed(42)

# Parameter
num_products = 100

# Kategori dan variasi
categories = ['Fashion', 'Elektronik', 'Kesehatan', 'Olahraga', 'Rumah Tangga', 'Kecantikan']
colors = ['Merah', 'Biru', 'Hitam', 'Putih', 'Hijau', 'Kuning']
sizes = ['S', 'M', 'L', 'XL']
image_base_url = 'https://dummyimage.com/600x400/'

# Fungsi untuk generate product ID
def generate_product_id(i):
    return f'P{i:03d}'

# Generate data
data = []
for i in range(1, num_products + 1):
    product_id = generate_product_id(i)
    category = random.choice(categories)
    name = f"{random.choice(['Sepatu', 'Baju', 'Laptop', 'Kursi', 'Suplemen', 'Lipstik'])} {fake.word().capitalize()}"
    description = fake.sentence(nb_words=8)
    price = random.randint(50000, 3000000)
    discount_price = price - random.randint(0, int(price * 0.3))
    stock_quantity = random.randint(0, 200)
    image_url = f"{image_base_url}{random.randint(100, 999)}/fff.png&text={name.replace(' ', '+')}"
    rating = round(random.uniform(1.5, 5.0), 1)
    reviews_count = random.randint(0, 500)
    variant = f"Warna: {random.choice(colors)}, Ukuran: {random.choice(sizes)}"

    data.append([
        product_id, name, description, category, price, discount_price,
        stock_quantity, image_url, rating, reviews_count, variant
    ])

# Buat DataFrame
columns = [
    'product_id', 'name', 'description', 'category', 'price', 'discount_price',
    'stock_quantity', 'image_url', 'rating', 'reviews_count', 'variants'
]
df_products = pd.DataFrame(data, columns=columns)

# Simpan ke file Excel/CSV (opsional)
df_products.to_excel("dummy_products.xlsx", index=False)
df_products.to_csv("dummy_products.csv", index=False)

# Tampilkan 5 data pertama
print(df_products.head())

import pandas as pd
import random
from faker import Faker
import hashlib

# Inisialisasi Faker
fake = Faker()
Faker.seed(123)
random.seed(123)

# Jumlah pengguna
num_users = 100

# Fungsi hash password sederhana (untuk dummy data saja)
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Role user
roles = ['customer'] * 95 + ['admin'] * 5  # 5% admin

# Generate data
data_users = []
for i in range(1, num_users + 1):
    user_id = f'U{i:04d}'
    name = fake.name()
    email = fake.email()
    password = fake.password(length=10)
    password_hash = hash_password(password)
    phone = fake.phone_number()
    address = f"{fake.street_address()}, {fake.city()}, {fake.postcode()}, {fake.country()}"
    registration_date = fake.date_between(start_date='-2y', end_date='today')
    is_verified = random.choice([True, False])
    user_role = random.choice(roles)

    data_users.append([
        user_id, name, email, password_hash, phone,
        address, registration_date, is_verified, user_role
    ])

# Buat DataFrame
columns_users = [
    'user_id', 'name', 'email', 'password_hash', 'phone',
    'address', 'registration_date', 'is_verified', 'user_role'
]
df_users = pd.DataFrame(data_users, columns=columns_users)

# Simpan ke file
df_users.to_excel("dummy_users.xlsx", index=False)
df_users.to_csv("dummy_users.csv", index=False)

# Tampilkan 5 data awal
print(df_users.head())

import pandas as pd
import random
from faker import Faker

# Inisialisasi Faker
fake = Faker()
Faker.seed(2025)
random.seed(2025)

# Load user_id dari file sebelumnya atau generate dummy user_id
user_ids = [f'U{i:04d}' for i in range(1, 101)]  # 100 pengguna

# Status dan metode pembayaran
order_statuses = ['pending', 'shipped', 'delivered', 'canceled']
payment_methods = ['credit card', 'paypal', 'COD']

# Jumlah pesanan
num_orders = 300

# Generate data pesanan
orders_data = []
for i in range(1, num_orders + 1):
    order_id = f'O{i:05d}'
    user_id = random.choice(user_ids)
    order_date = fake.date_between(start_date='-2y', end_date='today')
    shipping_address = fake.address().replace('\n', ', ')
    billing_address = fake.address().replace('\n', ', ')
    order_status = random.choices(order_statuses, weights=[2, 3, 4, 1])[0]
    payment_method = random.choice(payment_methods)
    total_amount = round(random.uniform(50000, 3000000), 2)
    shipping_cost = round(random.uniform(10000, 100000), 2)
    tracking_number = fake.bothify(text='TRK########') if order_status in ['shipped', 'delivered'] else None

    orders_data.append([
        order_id, user_id, order_date, shipping_address, billing_address,
        order_status, payment_method, total_amount, shipping_cost, tracking_number
    ])

# Buat DataFrame
columns_orders = [
    'order_id', 'user_id', 'order_date', 'shipping_address', 'billing_address',
    'order_status', 'payment_method', 'total_amount', 'shipping_cost', 'tracking_number'
]
df_orders = pd.DataFrame(orders_data, columns=columns_orders)

# Simpan ke file
df_orders.to_excel("dummy_orders.xlsx", index=False)
df_orders.to_csv("dummy_orders.csv", index=False)

# Tampilkan 5 data awal
print(df_orders.head())

import pandas as pd
import random

# Load data order_id dan product_id
order_ids = [f'O{i:05d}' for i in range(1, 301)]  # dari dummy orders
product_ids = [f'P{i:03d}' for i in range(1, 51)]  # dari dummy products (anggap ada 50 produk)

# Jumlah item detail
num_order_items = 1000

# Generate data order items
order_items = []
for i in range(1, num_order_items + 1):
    order_item_id = f'OI{i:05d}'
    order_id = random.choice(order_ids)
    product_id = random.choice(product_ids)
    quantity = random.randint(1, 5)
    unit_price = round(random.uniform(50000, 1500000), 2)
    subtotal = round(quantity * unit_price, 2)

    order_items.append([
        order_item_id, order_id, product_id, quantity, unit_price, subtotal
    ])

# Buat DataFrame
columns_order_items = ['order_item_id', 'order_id', 'product_id', 'quantity', 'unit_price', 'subtotal']
df_order_items = pd.DataFrame(order_items, columns=columns_order_items)

# Simpan ke file
df_order_items.to_excel("dummy_order_items.xlsx", index=False)
df_order_items.to_csv("dummy_order_items.csv", index=False)

# Tampilkan contoh
print(df_order_items.head())

import pandas as pd
import random
from faker import Faker

# Inisialisasi Faker
fake = Faker()
Faker.seed(2025)
random.seed(2025)

# Asumsikan kita punya 100 user dan 50 produk
user_ids = [f'U{i:04d}' for i in range(1, 101)]
product_ids = [f'P{i:03d}' for i in range(1, 51)]

# Jumlah total entri keranjang
num_cart_items = 500

# Generate data keranjang
cart_data = []
for i in range(1, num_cart_items + 1):
    cart_id = f'C{i:05d}'
    user_id = random.choice(user_ids)
    product_id = random.choice(product_ids)
    quantity = random.randint(1, 3)
    added_date = fake.date_between(start_date='-6M', end_date='today')

    cart_data.append([
        cart_id, user_id, product_id, quantity, added_date
    ])

# Buat DataFrame
columns_cart = ['cart_id', 'user_id', 'product_id', 'quantity', 'added_date']
df_cart = pd.DataFrame(cart_data, columns=columns_cart)

# Simpan ke file
df_cart.to_excel("dummy_cart.xlsx", index=False)
df_cart.to_csv("dummy_cart.csv", index=False)

# Tampilkan contoh data
print(df_cart.head())

import pandas as pd
import random
from faker import Faker

# Inisialisasi Faker
fake = Faker()
Faker.seed(2025)
random.seed(2025)

# Load order_id (asumsi 300 orders seperti sebelumnya)
order_ids = [f'O{i:05d}' for i in range(1, 301)]

# Status & metode pembayaran
payment_statuses = ['paid', 'failed', 'refunded']
payment_methods = ['credit card', 'paypal', 'COD']

# Generate data pembayaran
payments = []
for i, order_id in enumerate(order_ids, start=1):
    payment_id = f'PMT{i:05d}'
    payment_date = fake.date_between(start_date='-6M', end_date='today')
    amount = round(random.uniform(100000, 3000000), 2)

    # Status lebih banyak "paid"
    payment_status = random.choices(payment_statuses, weights=[80, 10, 10])[0]
    payment_method = random.choice(payment_methods)

    payments.append([
        payment_id, order_id, payment_date, amount, payment_status, payment_method
    ])

# Buat DataFrame
columns_payments = ['payment_id', 'order_id', 'payment_date', 'amount', 'payment_status', 'payment_method']
df_payments = pd.DataFrame(payments, columns=columns_payments)

# Simpan ke file
df_payments.to_excel("dummy_payments.xlsx", index=False)
df_payments.to_csv("dummy_payments.csv", index=False)

# Tampilkan contoh data
print(df_payments.head())

import pandas as pd
import random
from faker import Faker

# Inisialisasi Faker
fake = Faker()
Faker.seed(2025)
random.seed(2025)

# Asumsi daftar user_id dan product_id
user_ids = [f'U{i:04d}' for i in range(1, 101)]      # 100 pengguna
product_ids = [f'P{i:03d}' for i in range(1, 51)]    # 50 produk

# Jumlah review total
num_reviews = 800

# Komentar dummy positif & negatif
positive_comments = [
    "Produk sangat memuaskan!", "Kualitas bagus dan sesuai ekspektasi.",
    "Pengiriman cepat dan rapi.", "Saya suka sekali dengan produk ini.",
    "Harga terjangkau dan berkualitas."
]

negative_comments = [
    "Produk tidak sesuai gambar.", "Kualitas kurang bagus.",
    "Pengiriman lambat.", "Barang datang rusak.",
    "Tidak puas dengan pelayanan."
]

# Generate data reviews
reviews = []
for i in range(1, num_reviews + 1):
    review_id = f'R{i:05d}'
    product_id = random.choice(product_ids)
    user_id = random.choice(user_ids)
    rating = random.choices([1, 2, 3, 4, 5], weights=[5, 10, 20, 30, 35])[0]

    # Pilih komentar berdasarkan rating
    if rating >= 4:
        comment = random.choice(positive_comments)
    else:
        comment = random.choice(negative_comments)

    review_date = fake.date_between(start_date='-6M', end_date='today')

    reviews.append([
        review_id, product_id, user_id, rating, comment, review_date
    ])

# Buat DataFrame
columns_review = ['review_id', 'product_id', 'user_id', 'rating', 'comment', 'review_date']
df_reviews = pd.DataFrame(reviews, columns=columns_review)

# Simpan ke file
df_reviews.to_excel("dummy_product_reviews.xlsx", index=False)
df_reviews.to_csv("dummy_product_reviews.csv", index=False)

# Tampilkan contoh data
print(df_reviews.head())

"""**end data dummy**"""

import pandas as pd

# Load semua data
df_products = pd.read_csv("dummy_products.csv")
df_users = pd.read_csv("dummy_users.csv")
df_orders = pd.read_csv("dummy_orders.csv")
df_order_items = pd.read_csv("dummy_order_items.csv")
df_payments = pd.read_csv("dummy_payments.csv")
df_reviews = pd.read_csv("dummy_product_reviews.csv")

# Gabungkan Order + Payments
df_orders_payments = pd.merge(df_orders, df_payments, on='order_id', how='left')

# Gabungkan Order Items + Produk
df_order_details = pd.merge(df_order_items, df_products, on='product_id', how='left')

# Gabungkan Order Details + Order + Payment (full join)
df_sales = pd.merge(df_order_details, df_orders_payments, on='order_id', how='left')

# Gabungkan Rating dengan Produk
df_product_reviews_summary = df_reviews.groupby('product_id').agg({
    'rating': ['mean', 'count']
}).reset_index()
df_product_reviews_summary.columns = ['product_id', 'avg_rating', 'review_count']

df_products_full = pd.merge(df_products, df_product_reviews_summary, on='product_id', how='left')

# Cek hasil akhir
df_sales.head()

df_products_full.head()

# Simpan untuk Excel
df_sales.to_excel("sales_analysis.xlsx", index=False)
df_products_full.to_excel("product_performance.xlsx", index=False)

product_sales = df_sales.groupby(['product_id', 'name']).agg({
    'quantity': 'sum',
    'subtotal': 'sum'
}).reset_index().sort_values(by='subtotal', ascending=False)

# Simpan ke Excel
product_sales.to_excel("produk_terlaris.xlsx", index=False)

df_sales['order_date'] = pd.to_datetime(df_sales['order_date'])
df_sales['order_month'] = df_sales['order_date'].dt.to_period('M').astype(str)

monthly_sales = df_sales.groupby('order_month')['total_amount'].sum().reset_index()
monthly_sales.to_excel("penjualan_bulanan.xlsx", index=False)

payment_popularity = df_payments['payment_method'].value_counts().reset_index()
payment_popularity.columns = ['payment_method', 'count']
payment_popularity.to_excel("payment_method_popularity.xlsx", index=False)

rating_vs_sales = pd.merge(
    df_product_reviews_summary,
    df_sales.groupby('product_id')['quantity'].sum().reset_index(),
    on='product_id'
)
rating_vs_sales.to_excel("rating_vs_sales.xlsx", index=False)

loyal_customers = df_sales.groupby('user_id').agg({
    'order_id': 'nunique',
    'total_amount': 'sum'
}).reset_index().sort_values(by='total_amount', ascending=False)

loyal_customers.to_excel("pelanggan_loyal.xlsx", index=False)

low_stock = df_products[df_products['stock_quantity'] < 20].sort_values(by='stock_quantity')
low_stock.to_excel("stok_hampir_habis.xlsx", index=False)