# -*- coding: utf-8 -*-
"""Data Analyst - AirBnB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1blllfjr0HcyceKSAN-Wuylrg3yDAO2vu
"""

import pandas as pd
import numpy as np

df = pd.read_csv('airbnb_open_data.csv', sep=',')

df.head()

df.info()

#Transformasi Data
# Konversi kolom harga dan service fee ke float (hapus simbol $, koma)
def clean_currency(x):
    if isinstance(x, str):
        return float(x.replace('$', '').replace(',', '').strip())
    return x

df['price'] = df['price'].apply(clean_currency)
df['service fee'] = df['service fee'].apply(clean_currency)

# Konversi kolom bertipe numerik ke integer jika tidak ada pecahan
int_columns = ['minimum nights', 'number of reviews', 'availability 365', 'Construction year']
for col in int_columns:
    df[col] = df[col].astype('Int64')  # Support NaN

# Ubah kolom tanggal ke datetime
df['last review'] = pd.to_datetime(df['last review'], errors='coerce')

# Opsional: ubah beberapa kolom jadi kategori (untuk efisiensi atau modeling)
category_cols = [
    'room type', 'cancellation_policy', 'instant_bookable',
    'host_identity_verified', 'neighbourhood group',
    'neighbourhood', 'country', 'country code'
]
for col in category_cols:
    df[col] = df[col].astype('category')

df.info()

df['room type'].value_counts()

df.describe()

df.shape

# Hapus kolom yang tidak penting
columns_to_drop = ['id', 'host id', 'host name', 'house_rules', 'license']
df = df.drop(columns=columns_to_drop)

print(df.isnull().sum())

# Drop kolom NAME (tidak penting untuk analisis)
df.drop(columns=['NAME'], inplace=True)

# Kategori: isi dengan modus
fill_mode_cols = ['neighbourhood group', 'neighbourhood', 'country', 'country code',
                  'instant_bookable', 'cancellation_policy']
for col in fill_mode_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

# Kolom kategorikal dengan missing sedikit: isi dengan 'unknown'
# Add 'unknown' to the categories of 'host_identity_verified'
df['host_identity_verified'] = df['host_identity_verified'].cat.add_categories(['unknown'])
df['host_identity_verified'].fillna('unknown', inplace=True)

# Koordinat lokasi: drop baris yang null
df.dropna(subset=['lat', 'long'], inplace=True)

# Pembersihan kolom price
df['price'] = pd.to_numeric(df['price'], errors='coerce')
df = df.dropna(subset=['price'])
df = df[df['price'] > 0]
df = df[(df['price'] >= 5) & (df['price'] <= 800)]
Q1 = df['price'].quantile(0.25)
Q3 = df['price'].quantile(0.75)
IQR = Q3 - Q1
df = df[(df['price'] >= Q1 - 1.0 * IQR) & (df['price'] <= Q3 + 1.0 * IQR)]

# Kolom numerik: isi dengan median
fill_median_cols = ['Construction year', 'service fee', 'minimum nights',
                    'number of reviews', 'review rate number',
                    'calculated host listings count', 'availability 365']
for col in fill_median_cols:
    df[col].fillna(df[col].median(), inplace=True)

# Kolom 'reviews per month': isi dengan 0 (anggap belum ada review)
df['reviews per month'].fillna(0, inplace=True)

print(df.isnull().sum())

"""##**Exploratory Data Analysis (EDA)**"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x='room type', y='price', data=df)
plt.title("Price by Room Type")
plt.show()

"""**Insight:** \
Entire home/apt memiliki harga median tertinggi. \

Shared room dan Private room jauh lebih terjangkau.
"""

plt.figure(figsize=(10,6))
sns.histplot(df['price'], bins=100, kde=True)
plt.xlim(0, 1000)  # Batasi untuk hindari outlier ekstrem
plt.title('Distribusi Harga Listing')
plt.xlabel('Harga')
plt.ylabel('Jumlah Listing')
plt.show()

"""**Insight:** \
Mayoritas listing memiliki harga di bawah 500, artinya pasar didominasi oleh properti berbiaya rendah. \

Ada outlier hingga ribuan dolar, kemungkinan listing premium/luxury.
"""

plt.figure(figsize=(8,5))
sns.countplot(x='room type', data=df)
plt.title('Distribusi Tipe Kamar')
plt.xlabel('Tipe Kamar')
plt.ylabel('Jumlah Listing')
plt.show()

df['room type'].value_counts(normalize=True) * 100

plt.figure(figsize=(10,6))
sns.scatterplot(x='long', y='lat', hue='room type', data=df, alpha=0.4)
plt.title('Sebaran Geografis Listing Airbnb')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(title='Room Type')
plt.show()

"""**Insight:** \
Konsentrasi listing tinggi di beberapa area (kemungkinan pusat kota). \

Setiap room type tersebar di area berbeda — bisa dianalisis lebih lanjut secara spasial.
"""

plt.figure(figsize=(12,6))
sns.countplot(x='neighbourhood group', data=df, order=df['neighbourhood group'].value_counts().index)
plt.title('Jumlah Listing per Neighbourhood Group')
plt.xlabel('Neighbourhood Group')
plt.ylabel('Jumlah Listing')
plt.xticks(rotation=45)
plt.show()

df.drop(df[df['neighbourhood group'].isin(['brookln', 'manhatan'])].index, inplace=True)

df['neighbourhood group'].value_counts()

"""**Insight:** \
Beberapa neighbourhood group sangat dominan. \

Dapat jadi fokus pemasaran atau area dengan persaingan tinggi.
"""

plt.figure(figsize=(12,8))
numerics = df.select_dtypes(include=['float64', 'int64', 'Int64'])
corr = numerics.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Variabel Numerik')
plt.show()

"""**Insight:** \
price mungkin berkorelasi lemah/moderat dengan number of reviews, availability 365, dll. \

Perlu investigasi lebih lanjut untuk fitur yang bisa prediksi harga.
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Pastikan nama kolom sesuai
plt.figure(figsize=(10, 6))
sns.regplot(
    x='number of reviews',
    y='reviews per month',
    data=df,
    scatter_kws={'alpha':0.5},
    line_kws={'color':'red'},
)
plt.title('Scatterplot & Trendline: Number of Reviews vs Reviews per Month')
plt.xlabel('Total Number of Reviews')
plt.ylabel('Reviews per Month')
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='price', y='number of reviews', alpha=0.5)
plt.xscale('log')  # karena price cenderung skewed
plt.title('Scatterplot: Price vs Number of Reviews (log scale)')
plt.xlabel('Price (log scale)')
plt.ylabel('Number of Reviews')
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Insight:** \
Banyak listing dengan harga murah justru punya review lebih banyak → indikasi high demand di segmen low-mid range. \

Listing mahal review-nya jarang → bisa jadi pasar niche.
"""

plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='room type', y='number of reviews')
plt.yscale('log')  # untuk merapikan outlier tinggi
plt.title('Number of Reviews per Room Type')
plt.xlabel('Room Type')
plt.ylabel('Number of Reviews (log scale)')
plt.tight_layout()
plt.show()

"""**Insight:** \
Entire home/apt cenderung punya lebih sedikit review, tapi stabil. \

Private room lebih sering direview → bisa jadi karena harga lebih terjangkau, cocok untuk solo traveler.

##**Feature Engineering**
"""

# Feature Engineering
df['price_per_night'] = df['price'] / df['minimum nights']
# Hapus nilai negatif atau inf pada price_per_night
df = df[df['price_per_night'] > 0]
df = df[np.isfinite(df['price_per_night'])]
# Terapkan batasan untuk price_per_night (misalnya, $1 hingga $500)
df = df[(df['price_per_night'] >= 1) & (df['price_per_night'] <= 500)]
# Terapkan IQR untuk price_per_night
Q1_ppn = df['price_per_night'].quantile(0.25)
Q3_ppn = df['price_per_night'].quantile(0.75)
IQR_ppn = Q3_ppn - Q1_ppn
df = df[(df['price_per_night'] >= Q1_ppn - 1.0 * IQR_ppn) & (df['price_per_night'] <= Q3_ppn + 1.0 * IQR_ppn)]

df['is_verified_host'] = df['host_identity_verified'].apply(lambda x: 1 if x == 'verified' else 0)
df['month_last_review'] = df['last review'].dt.month
df['review_intensity'] = df['reviews per month'] * df['number of reviews']
df['listing_age_month'] = (datetime.today() - df['last review']).dt.days // 30

df.head()

"""##**Synthesize EDA + Feature Insight**
Gabungkan hasil EDA dan fitur baru untuk menjawab pertanyaan bisnis.

**Tipe kamar mana yang paling menguntungkan?**
"""

plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='room type', y='price_per_night')
plt.title('Price per Night by Room Type')
plt.xlabel('Room Type')
plt.ylabel('Price per Night')
plt.tight_layout()
plt.show()

"""**berikut insight yang dapat diambil:**

- Hotel room memiliki median harga per malam paling tinggi di antara semua tipe kamar.

- Entire home/apt memiliki median harga di bawah hotel room, namun distribusi harga cukup lebar, menandakan variasi harga yang besar.

- Private room dan Shared room memiliki median harga yang lebih rendah dibanding dua tipe lainnya.

- Semua tipe kamar memiliki rentang harga yang cukup besar, namun hotel room dan entire home/apt cenderung memiliki outlier di harga tinggi.

###**Feature Insight: Tipe Kamar Paling Menguntungkan**
**Definisi "Paling Menguntungkan":**

- Jika "menguntungkan" diartikan sebagai potensi pendapatan per malam tertinggi, maka tipe kamar dengan median harga tertinggi adalah yang paling menguntungkan.

**Berdasarkan Visualisasi:** \

- Hotel room adalah tipe kamar dengan median harga per malam paling tinggi.

- Artinya, secara rata-rata, pemilik hotel room bisa mendapatkan pendapatan per malam lebih besar dibanding tipe kamar lain.

**Kesimpulan Bisnis** \
`Tipe kamar yang paling menguntungkan berdasarkan output visual adalah:`

> Hotel room

Karena memiliki median harga per malam tertinggi, sehingga berpotensi memberikan pendapatan lebih besar bagi pemiliknya.

**Musim (Bulan) Apa yang Ramai Pengunjung?**
"""

plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='month_last_review')
plt.title('Number of Reviews by Month')
plt.xlabel('Month of Last Review')
plt.ylabel('Number of Reviews')
plt.tight_layout()
plt.show()

"""**Hasil Visualisasi** \
- Bulan ke-6 (Juni) menunjukkan jumlah review paling tinggi, jauh melampaui bulan-bulan lainnya.

- Bulan ke-7 (Juli) dan bulan ke-1 (Januari) juga cukup tinggi, namun tidak setinggi Juni.

- Bulan-bulan lain cenderung stabil di angka lebih rendah.

**Kesimpulan** \
Bulan yang paling ramai pengunjung adalah bulan Juni (bulan ke-6), terlihat dari lonjakan jumlah review yang sangat signifikan pada bulan tersebut. Ini menandakan bahwa pada bulan Juni, aktivitas pengunjung dan kemungkinan tingkat okupansi sangat tinggi dibandingkan bulan lain.

**Insight Bisnis** \
- Anda dapat fokus pada promosi, persiapan properti, atau penawaran spesial menjelang bulan Juni untuk memaksimalkan pendapatan.

- Jika ingin meningkatkan kunjungan di bulan lain, bisa dilakukan strategi diskon atau event khusus di bulan-bulan yang jumlah review-nya rendah.

**Apakah Harga Memengaruhi Jumlah Review?**
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='price', y='number of reviews', alpha=0.5)
plt.xscale('log')  # Menggunakan log scale untuk harga
plt.title('Price vs Number of Reviews')
plt.xlabel('Price (log scale)')
plt.ylabel('Number of Reviews')
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Insight dari Plot:**
- Sebaran Data: Titik-titik tersebar cukup merata di seluruh rentang harga, terutama pada harga rendah hingga menengah. Pada harga tinggi, jumlah review cenderung tetap rendah.

- Tidak Ada Korelasi Jelas: Tidak terlihat pola naik atau turun yang signifikan antara harga dan jumlah review. Listing dengan harga rendah, menengah, maupun tinggi semuanya bisa memiliki jumlah review yang tinggi maupun rendah.

- Listing Harga Rendah-Medium: Cenderung memiliki lebih banyak listing dengan jumlah review tinggi, namun tidak berarti harga tinggi tidak mungkin mendapat review banyak.

- Harga Sangat Tinggi: Umumnya jumlah review tetap rendah hingga sedang, jarang yang sangat tinggi.

**Kesimpulan:** \
```
Harga tidak secara signifikan memengaruhi jumlah review.
Listing dengan harga berapa pun bisa mendapatkan jumlah review yang banyak atau sedikit. Namun, listing dengan harga rendah hingga menengah cenderung lebih sering mendapat review dalam jumlah besar dibandingkan listing dengan harga sangat tinggi
```

**Insight Bisnis:** \
- Jika tujuan Anda meningkatkan jumlah review (dan biasanya juga okupansi), harga yang kompetitif (tidak terlalu mahal) bisa menjadi salah satu faktor pendukung, walaupun bukan satu-satunya penentu.

- Faktor lain seperti lokasi, kualitas layanan, dan pengalaman tamu juga sangat berpengaruh terhadap jumlah review.

**Apakah Verified Host Punya Performa Lebih Baik?**
"""

plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='is_verified_host', y='number of reviews')
plt.title('Number of Reviews by Host Verification Status')
plt.xlabel('Host Verified')
plt.ylabel('Number of Reviews')
plt.tight_layout()
plt.show()

"""**Data Splitting**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import pandas as pd

# Asumsikan df adalah DataFrame Anda

# Misal kita ingin memprediksi 'price' menggunakan beberapa fitur
# ----> DEFINE X and y AFTER data cleaning operations on df
X = df[['price_per_night', 'room type', 'lat', 'long', 'neighbourhood', 'minimum nights', 'number of reviews']]
y = df['price']

# Buat instance OneHotEncoder
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore') # sparse=False untuk output dense

# ----> FIT OneHotEncoder pada SEMUA fitur kategorikal:
categorical_features = ['room type', 'neighbourhood'] # Sertakan 'neighbourhood'
encoded_data = encoder.fit_transform(X[categorical_features])

# Buat DataFrame dengan kolom yang telah di-encode
encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_features), index=X.index) # uses X.index

# Hapus kolom kategorikal asli dan gabungkan kolom yang telah di-encode
X = X.drop(categorical_features, axis=1) # Hapus 'room type' dan 'neighbourhood'
X = pd.concat([X, encoded_df], axis=1)

# Pastikan X dan y memiliki jumlah baris yang sama sebelum di-split
assert X.shape[0] == y.shape[0], "Jumlah baris X dan y tidak sama!"

# Bagi data menjadi set pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Membuat model Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Training model
rf_model.fit(X_train, y_train)

# Melakukan prediksi
y_pred = rf_model.predict(X_test)

# Evaluasi model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from scipy.stats import randint
import numpy as np

# Parameter distribusi (bisa diperluas sesuai kebutuhan)
param_dist = {
    'n_estimators': randint(50, 300),
    'max_depth': [10, 20, None],
    'min_samples_split': randint(2, 11)
}

# RandomizedSearchCV setup
random_search = RandomizedSearchCV(
    estimator=RandomForestRegressor(random_state=42),
    param_distributions=param_dist,
    n_iter=20,               # jumlah kombinasi yg dicoba (bisa ubah)
    cv=3,
    n_jobs=-1,
    verbose=2,
    random_state=42
)

# Fit ke data training
random_search.fit(X_train, y_train)

# Model terbaik
best_model = random_search.best_estimator_
print(f"Best Parameters: {random_search.best_params_}")

# Evaluasi di test set
y_pred = best_model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Test RMSE: {rmse:.2f}")
print(f"Test R² Score: {r2:.2f}")

from sklearn.metrics import mean_squared_error, r2_score, root_mean_squared_error # Import root_mean_squared_error

# Menghitung RMSE dan R²
rmse = root_mean_squared_error(y_test, y_pred) # Use root_mean_squared_error
r2 = r2_score(y_test, y_pred)

print(f'RMSE: {rmse}')
print(f'R²: {r2}')

import matplotlib.pyplot as plt

# Visualisasi Prediksi vs Aktual
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Price')
plt.show()

# Prediksi menggunakan model terbaik
y_pred = best_model.predict(X_test)

# Jika ada target sebenarnya (y_test), hitung metrik evaluasi
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Test RMSE: {rmse:.2f}")
print(f"Test R² Score: {r2:.2f}")

# Jika tidak ada y_test (misal data baru tanpa label), cukup tampilkan prediksi
print("Prediksi harga:", y_pred)

"""**TEST DATA**"""

import pandas as pd

# Buat DataFrame contoh untuk input data
new_data = pd.DataFrame({
    'price_per_night': [90],
    'room type': ['Entire home/apt'],
    'lat': [40.7008],
    'long': [-74.0060],
    'neighbourhood': ['Manhattan'],
    'minimum nights': [2],
    'number of reviews': [10]
}, index=[0]) # index=[0] untuk satu data point

# ----> Transformasikan fitur kategorikal dengan encoder yang SAMA:
categorical_features = ['room type', 'neighbourhood']
encoded_new_data = encoder.transform(new_data[categorical_features])

# ----> Buat DataFrame untuk data yang telah di-encode:
encoded_new_df = pd.DataFrame(encoded_new_data, columns=encoder.get_feature_names_out(categorical_features), index=new_data.index)

# ----> Gabungkan dengan data numerik:
new_data = new_data.drop(categorical_features, axis=1)
new_data = pd.concat([new_data, encoded_new_df], axis=1)

# ----> Prediksi dengan model terbaik:
predicted_price = best_model.predict(new_data)

print(f"Prediksi harga untuk input data: {predicted_price[0]:.2f}")